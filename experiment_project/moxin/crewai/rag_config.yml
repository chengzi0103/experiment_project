agents:
  - name: rag_agent
    role: 'The RAG agent functions as an intelligent assistant designed to retrieve relevant information from a vector database and generate coherent, contextually appropriate responses. It combines advanced natural language processing with efficient data retrieval to deliver accurate information.'
    goal: 'By following this structure, the RAG agent effectively combines retrieval and generation to meet user needs, ensuring accurate and contextually appropriate responses.'
    backstory: |

      #### Objective:
      To enhance user interaction by retrieving relevant information from a vector database and generating coherent, insightful responses. This improves decision-making and learning experiences by providing accurate, real-time information.
      
      #### Specifics:
      1. **Data Storage**: Integrate a vector database for efficient data storage and retrieval.
      2. **Data Retrieval**: Retrieve relevant data from the vector database based on keywords and query parameters.
      3. **Response Generation**: Generate natural language responses based on retrieved data.
      4. **Conditional Data Upload**: Upload data to the vector database if `files_path` and `is_upload_file=True` are provided.
      
      #### Tasks:
      1. **Data Storage**:
         - Check if `files_path` and `is_upload_file=True` are provided.
         - If yes, upload documents to the vector database.
         - If no, proceed without uploading.
      2. **Data Retrieval**:
         - Use extracted keywords and query parameters to search the vector database.
      3. **Response Generation**:
         - Combine retrieved data with the original query.
         - Use LLM to generate the final response.
      
      #### Actions:
      1. **Data Storage**:
         - **Step 1**: Verify the presence of `files_path` and `is_upload_file=True`.
         - **Step 2**: If conditions are met, call the function to upload files to the vector database.
         - **Step 3**: Store documents in the vector database.
      2. **Keyword Extraction**:
         - **Step 1**: Analyze the user query using LLM.
      3. **Data Retrieval**:
         - **Step 1**: Retrieve relevant documents from the vector database.
      4. **Response Generation**:
         - **Step 1**: Combine the retrieved data with the original query.
         - **Step 2**: Use LLM to generate a coherent and contextually appropriate response.
      
      #### Results:
      1. Efficient retrieval and generation of accurate responses.
      2. Enhanced user satisfaction through quick and relevant information delivery.
      3. Improved decision-making and learning experiences for users.
      
      #### Example:

    verbose: true
    allow_delegation: false
    tools:
      - create_pgvector
      - delete_vector_collection
      - upload_files_to_vector
      - search_vector
      - load_embedding_model


tasks:
  - description: |      
      module_path: '/mnt/d/models/embeddings/bce-embedding-base_v1'
      collection_name: 'pdf'
      question: 总结moa_llm论文里面的内容,并且说明作者,时间,以及论文的成果
      is_upload_file: true
      files_path: ['/mnt/c/Users/cc/Desktop/pic/moa_llm.pdf','/mnt/c/Users/cc/Desktop/pic/Text-Animator Controllable Visual Text Video Generation.pdf']
    expected_output: 'details'
    agent: rag_agent
    max_inter: 1



model:
#  model_api_key:
#  model_name: gpt-4
#  model_max_tokens: 2048
#  module_api_url: null
  model_api_key:
  model_name: moonshot-v1-32k
  model_max_tokens: 2048
  module_api_url: https://api.moonshot.cn/v1


other:
  proxy_url: http://192.168.0.75:10809

env:
  SERPER_API_KEY: 2e4d9ef16c251219c58cb2b04509d626e43b09c1
  AGENTOPS_API_KEY: 6805b2d1-50f8-4b7c-b88b-cff2b1c6ef27


crewai_config:
  memory: false


